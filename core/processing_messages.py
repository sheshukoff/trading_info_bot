import aio_pika
import asyncio
from dotenv import dotenv_values

from aio_pika.exchange import Exchange
from aio_pika.queue import Queue
from aio_pika.message import IncomingMessage

config = dotenv_values("../.env")

RABBITMQ_URL = config.get("RABBITMQ_URL")

dictionary = {'–∫—É–ø–∏ –±–∞—Ç–æ–Ω': '–ù–∞–ø–æ–º–∏–Ω–∞—é - –∫—É–ø–∏ –±–∞—Ç–æ–Ω',
              '—Ö–æ—á—É –ø–æ–ª—É—á–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã': '–î–∏—Å–∫–ª–∞–π–º–µ—Ä...',
              '–ö–∞—Ç–∞–ª–æ–≥': '''üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!–≠—Ç–æ—Ç Telegram-–±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –∞–Ω–∞–ª–∏–∑–µ —Ä—ã–Ω–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –û–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–≤—É—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π:

               üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: RSI 14
               –û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã (RSI) —Å –ø–µ—Ä–∏–æ–¥–æ–º 14. –ü–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–ª—è—Ç—å –∑–æ–Ω—ã –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –Ω–∞—Ö–æ–¥–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞.

               üìä –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –¢—Ä–µ–Ω–¥–æ–≤–∞—è
               –°–ª–µ–¥—É–µ—Ç –∑–∞ —Ç—Ä–µ–Ω–¥–æ–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö –∏ –¥—Ä—É–≥–∏—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, –æ–ø—Ä–µ–¥–µ–ª—è—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ä—ã–Ω–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä—É—è –ª–æ–∂–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã.''',

              'RSI 14': '–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ RSI 14',
              '–¶–µ–Ω—ã –ø–æ BTC': '–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Ü–µ–Ω—ã –ø–æ BTC'
}

# –≤—Å—è –ª–æ–≥–∏–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∏ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ worker.py


async def init_rabbit_mq():
    connection = await aio_pika.connect(RABBITMQ_URL)
    channel = await connection.channel()
    await channel.set_qos(prefetch_count=1)

    # –û–±—ä—è–≤–ª—è–µ–º exchange –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
    exchange = await channel.declare_exchange(
        "responses",
        aio_pika.ExchangeType.DIRECT,
        durable=True
    )
    print('–¢–∏–ø—ã init rabbit_mq', type(connection), type(channel), type(exchange))
    return connection, channel, exchange


async def processing_queue(queue: Queue, exchange: Exchange):
    async with queue.iterator() as queue_iter:
        async for message in queue_iter:
            async with message.process():
                await received_message(message, exchange)


async def received_message(message: IncomingMessage, exchange: Exchange):
    print('message', type(message))
    try:
        user_message = message.body.decode()
        print(user_message, 'user_message')
        result = await processing_user_message(user_message)

        await publish_result(exchange, message, result)
        # await publish_result(exchange, user_message, result)

    except UnicodeDecodeError:
        print("–û—à–∏–±–∫–∞ –≤ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏")
    except KeyError:
        print("–û—à–∏–±–∫–∞ –≤ –∫–ª—é—á–µ —Å–ª–æ–≤–∞—Ä—è")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def processing_user_message(user_message: str):
    if user_message.isdigit():
        result = int(user_message) ** 2
    else:
        result = dictionary[user_message]

    if result == '–î–∏—Å–∫–ª–∞–π–º–µ—Ä...':
        result = 100500

    return result


async def publish_result(exchange: Exchange, message: IncomingMessage, result: str):
    print('message.from_user.id', message.user_id)
    await exchange.publish(  # –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
        aio_pika.Message(
            body=str(result).encode(),
            correlation_id=message.correlation_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π correlation_id
            user_id=message.user_id
        ),
        routing_key="bot_responses_reminder",  # –û—á–µ—Ä–µ–¥—å –æ—Ç–≤–µ—Ç–æ–≤ –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ callback
    )


async def process_reminder():
    connection, channel, exchange = await init_rabbit_mq()
    print(connection, channel, exchange)

    queue = await channel.declare_queue("any_message", durable=True)  # —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å –∏ –±—Ä–∞—Ç—å –∏–∑ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏
    print('–æ—á–µ—Ä–µ–¥—å', type(queue))
    await processing_queue(queue, exchange)


async def process_tasks():
    connection = await aio_pika.connect(Config.RABBITMQ_URL)

    channel = await connection.channel()
    await channel.set_qos(prefetch_count=1)

    # –û–±—ä—è–≤–ª—è–µ–º exchange –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
    exchange = await channel.declare_exchange(
        "responses",
        aio_pika.ExchangeType.DIRECT,
        durable=True
    )

    queue = await channel.declare_queue("tasks", durable=True)

    async with queue.iterator() as queue_iter:
        async for message in queue_iter:
            async with message.process():
                try:
                    number = int(message.body.decode())
                    result = number ** 2
                    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {number} -> {result}")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ exchange
                    await exchange.publish(
                        aio_pika.Message(
                            body=str(result).encode(),
                            correlation_id=message.correlation_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π correlation_id
                        ),
                        routing_key="bot_responses",
                    )
                    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ exchange")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")


async def main():
    await asyncio.gather(
        process_reminder()
    )


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Exit')


# try:
#     await exchange.publish(
#         aio_pika.Message(
#             body=str(result).encode(),
#             correlation_id=message.correlation_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π correlation_id
#         ),
#         routing_key="bot_responses_reminder",  # –û—á–µ—Ä–µ–¥—å –æ—Ç–≤–µ—Ç–æ–≤ –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ callback
#     )
#     print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ exchange")
# except Exception as e:
#     print(f'–û—à–∏–±–∫–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {e}')


# async with queue.iterator() as queue_iter:
#     async for message in queue_iter:
#         async with message.process():
#             try:
#                 user_message = message.body.decode()
#                 if user_message.isdigit():
#                     result = int(user_message) ** 2
#                 else:
#                     result = dictionary[user_message]
#
#                 if result == '–î–∏—Å–∫–ª–∞–π–º–µ—Ä...':
#                     result = 100500
#
#                 while result == '–î–∏—Å–∫–ª–∞–π–º–µ—Ä...':
#                     time.sleep(5)
#                     await exchange.publish(  # –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
#                         aio_pika.Message(
#                             body=str(result).encode(),
#                             correlation_id=message.correlation_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π correlation_id
#                         ),
#                         routing_key="bot_responses_reminder",  # –û—á–µ—Ä–µ–¥—å –æ—Ç–≤–µ—Ç–æ–≤ –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ callback
#                     )
#                 print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ exchange")
#             except UnicodeDecodeError:
#                 print('–û—à–∏–±–∫–∞ –≤ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è')
#             except KeyError:
#                 print('–û—à–∏–±–∫–∞ –≤ –∫–ª—é—á–µ —Å–ª–æ–≤–∞—Ä—è')
#             except Exception as e:
#                 print(f'–û—à–∏–±–∫–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {e}')



