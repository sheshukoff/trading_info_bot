import asyncio
from asyncio import Task

from aioconsole import ainput


# async def ask_name():
#     try:
#         while True:
#             name = await ainput("–ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ: ")
#             print(f"–ü—Ä–∏–≤–µ—Ç, –≤—ã –≤—ã–±—Ä–∞–ª–∏ {name}!")
#             await asyncio.sleep(5)
#             yield name
#     except asyncio.CancelledError:
#         print("–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")


async def long_running_task():
    try:
        while True:
            await asyncio.sleep(10)
            print("–†–∞–±–æ—Ç–∞—é...10 —Å–µ–∫—É–Ω–¥")
    except asyncio.CancelledError:
        print("–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")


async def short_running_task():
    try:
        while True:
            await asyncio.sleep(3)
            print("–†–∞–±–æ—Ç–∞—é... 3 —Å–µ–∫—É–Ω–¥—ã")
    except asyncio.CancelledError:
        print("–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")


async def start_task(available_tasks, active_tasks, key):
    task_info = available_tasks[key]  # –ø–æ–ª—É—á–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    print(task_info)
    task = asyncio.create_task(task_info())  # –ó–∞–¥–∞—á–∞
    print(task)
    active_tasks[key] = {'state': True, 'task': task}
    return f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è {key} –∑–∞–ø—É—â–µ–Ω–∞"


async def stop_task(available_tasks, active_tasks: dict[dict[bool, Task]], key):
    # task_info = available_tasks[key]  # TODO –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–º
    # print('task_info', task_info)
    task_info = active_tasks[key]
    task: Task = task_info['task']
    task.cancel()
    task_info['state'] = False
    print(active_tasks)
    await task
    return f"{key} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"


async def handle_command():
    pass


async def main():
    "–§—É–Ω–∫—Ü–∏—è input –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ —Ç–æ –≤–≤–æ–¥–∏—Ç"

    available_tasks = {
        'RSI 14': long_running_task,
        '–¶–µ–Ω—ã –ø–æ BTC': short_running_task
    }

    active_tasks = {}  # TODO –º–æ–∂–Ω–æ –≤–º–µ—Å—Ç–æ 'state' –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ task.canselled(),
                       # TODO —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∫–ª—é—á–µ–Ω–∞–ª–∏ –∑–∞–¥–∞—á–∞

    while True:
        try:
            user_input = await ainput("> ")
            print(user_input)

            task_info = active_tasks.get(user_input)
            if not task_info:
                print(task_info)
                await start_task(available_tasks, active_tasks, user_input)
            else:
                if task_info.get('state') is True:
                    await stop_task(available_tasks, active_tasks, user_input)
                else:
                    await start_task(available_tasks, active_tasks, user_input)

                # if task_info.get('state') is True:
                #     result = await stop_task(available_tasks, active_tasks, user_input)
                #     print(result)
                # else:
                #     result = await start_task(available_tasks, active_tasks, user_input)
                #     print(result)
        except KeyboardInterrupt:
            print('Exit')






        # new_task = asyncio.create_task(available_tasks[user_input]())  # RSI 14
        # print(new_task)

    # async for answer in ask_name():
    #     # answer = await ask_name()
    #
    #     current_task = None
    #     new_task = asyncio.create_task(dictionary_1[answer]())
    #     print(answer)
    #     current_task = new_task
    #
    #     if current_task != new_task:
    #         current_task.cancel()

    # while True:
    #     if current_task is None:
    #         new_task = asyncio.create_task(dictionary_1[answer]())  # RSI 14
    #         current_task = new_task
    #
    #     if current_task != new_task:
    #         current_task.cancel()
    #         try:
    #             await current_task
    #         except asyncio.CancelledError:
    #             print(f'–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ {answer}')
    # else:
    #     current_task.cancel()
    #     print("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")

    # if current_task != new_task:
    #     new_task = asyncio.create_task(dictionary_1[answer]())
    #     current_task.cancel()
    #     current_task = new_task
    #     # print(current_task)
    # else:
    #     current_task.cancel()
    # try:
    #     await current_task
    # except asyncio.CancelledError:
    #     print("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")

    # elif '–¶–µ–Ω—ã BTC':
    #     task = asyncio.create_task(short_running_task())
    #
    # answer.cancel()
    #     print(current_task)
    #     try:
    #         await current_task
    #     except asyncio.CancelledError:
    #         print("–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")


if __name__ == "__main__":
    asyncio.run(main())

# strategy = {'RSI 14': long_running_task,
#             '–¶–µ–Ω—ã –ø–æ BTC': short_running_task}
#
# active_strategy = {}
#
#
# while True:
#     try:
#         user_input = input('–ù–∞–ø–∏—à–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:  ')
#
#         if active_strategy.get(user_input) is True:
#             print(f'–û—Ç–∫–ª—é—á–∞—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é {user_input}')
#             active_strategy[user_input] = False
#
#         else:
#             active_strategy[user_input] = True
#             print(f'–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ {user_input}')
#     except KeyboardInterrupt:
#         print('Exit')
# import asyncio
#
# async def long_running_task():
#     try:
#         while True:
#             await asyncio.sleep(10)
#             print("–†–∞–±–æ—Ç–∞—é...10 —Å–µ–∫—É–Ω–¥")
#     except asyncio.CancelledError:
#         print("–ó–∞–¥–∞—á–∞ long_running_task –æ—Ç–º–µ–Ω–µ–Ω–∞")
#
#
# async def short_running_task():
#     try:
#         while True:
#             await asyncio.sleep(3)
#             print("–†–∞–±–æ—Ç–∞—é...3 —Å–µ–∫—É–Ω–¥—ã")
#     except asyncio.CancelledError:
#         print("–ó–∞–¥–∞—á–∞ short_running_task –æ—Ç–º–µ–Ω–µ–Ω–∞")
#
# # –°–ª–æ–≤–∞—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
# dictionary_1 = {
#     'RSI 14': long_running_task,
#     '–¶–µ–Ω—ã –ø–æ BTC': short_running_task
# }
#
#
# async def main():
#     current_task = None
#     loop = asyncio.get_event_loop()
#
#     while True:
#         # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç asyncio)
#         name = await loop.run_in_executor(None, input, "\n–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é (–∏–ª–∏ '—Å—Ç–æ–ø'): ")
#
#         if name.lower() == "—Å—Ç–æ–ø":
#             print("–ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É...")
#             if current_task:
#                 current_task.cancel()
#                 try:
#                     await current_task
#                 except asyncio.CancelledError:
#                     pass
#             break
#
#         if name in dictionary_1:
#             # –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
#             if current_task:
#                 print("‚õî –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é...")
#                 current_task.cancel()
#                 try:
#                     await current_task
#                 except asyncio.CancelledError:
#                     print("‚úÖ –û—Ç–º–µ–Ω–µ–Ω–∞")
#
#             # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é
#             print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {name}")
#             current_task = asyncio.create_task(dictionary_1[name]())
#         else:
#             print("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ:", ", ".join(dictionary_1.keys()))
#
# # –ó–∞–ø—É—Å–∫
# if __name__ == "__main__":
#     asyncio.run(main())
